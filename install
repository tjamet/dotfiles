#!/usr/bin/env python3

from genericpath import exists
import distutils.spawn
import sys, os, pathlib, urllib.request, subprocess, tempfile, platform, shutil, pwd, platform

exclude = {"LICENSE", "README.md", ".git", ".gitignore", ".setup.d"}

goplatforms = {
    "x86_64": "amd64",
    "arm64": "arm64",
}

def main():
    os.path.dirname(sys.argv[0])
    dotfiles_dir = os.path.join(os.getcwd(), os.path.dirname(sys.argv[0]))
    for file in os.listdir(dotfiles_dir):
        if file in exclude:
            continue
        destination = os.path.join(pathlib.Path.home(), "."+file)
        try:
            os.symlink(os.path.join(dotfiles_dir, file), destination)
        except FileExistsError:
            os.remove(destination)
            os.symlink(os.path.join(dotfiles_dir, file), destination)
    for file in os.listdir(os.path.join(dotfiles_dir, "setup.d")):
        subprocess.check_call(["bash", os.path.join(dotfiles_dir,"setup.d", file)])

    local_bin = os.path.join(pathlib.Path.home(),".local/bin")
    if not os.path.exists(local_bin):
        os.makedirs(local_bin)
    os.environ["PATH"] = os.path.pathsep.join([os.environ["PATH"], "/usr/local/bin", "/opt/homebrew/bin"])

    if distutils.spawn.find_executable("brew") is None:
        resp = urllib.request.urlopen("https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh")
        if resp.status!=200:
            raise Exception("unexpected status %s"%resp.status)
        subprocess.check_call(["bash", "-c", resp.read()])

    if platform.system() == "Darwin":
        subprocess.check_call(["/opt/homebrew/bin/brew", "install", "--cask",
                              "visual-studio-code",
                              "docker",
                              "lastpass",
                              "google-chrome",
                              "slack",
                              "iterm2",
                              "tunnelblick",
                              ])
    subprocess.check_call(["/opt/homebrew/bin/brew", "install",
                           "whalebrew",
                           "gnupg",
                           "pinentry-mac",
                           "watch",
                           "kubernetes-cli",
                           "golang",
                            "int128/kubelogin/kubelogin",
                           ])


    powerline_go_path = os.path.join(local_bin,"powerline-go")
    with open(powerline_go_path, "wb") as fd:
        resp = urllib.request.urlopen("https://github.com/justjanne/powerline-go/releases/download/v1.24/powerline-go-%s-%s" % (sys.platform, goplatforms[platform.uname()[-2]]))
        if resp.status!=200:
            raise Exception("unexpected status %s"%resp.status)
        fd.write(resp.read())
    os.chmod(powerline_go_path, 0o755)

    powerline_go_path = os.path.join(local_bin,"git-review")
    with open(powerline_go_path, "wb") as fd:
        resp = urllib.request.urlopen("https://github.com/adevinta/maiao/releases/download/1.0.0/git-review-%s-%s" % (platform.uname()[0], goplatforms[platform.uname()[-2]]))
        if resp.status!=200:
            raise Exception("unexpected status %s"%resp.status)
        fd.write(resp.read())
    os.chmod(powerline_go_path, 0o755)

    oh_my_zsh_dir = os.path.join(pathlib.Path.home(),".oh-my-zsh")
    if not os.path.exists(oh_my_zsh_dir):
        with tempfile.NamedTemporaryFile() as script:
            resp = urllib.request.urlopen("https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh")
            if resp.status!=200:
                raise Exception("unexpected status %s"%resp.status)
            script.write(resp.read())
            subprocess.check_call(["bash", script.name, "--unattended", "--keep-zshrc"])
    if pwd.getpwuid(os.getuid()).pw_name != "codespace":
        subprocess.call(["chsh", "-s", shutil.which("zsh"), pwd.getpwuid(os.getuid()).pw_name])
    # subprocess.check_call(["git", "clone", "https://github.com/powerline/fonts.git", "--depth=1"])
    # subprocess.check_call()

if __name__ == "__main__":
    main()
